#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import re
import glob
from pathlib import Path

def clean_subtitle_text(text):
    """
    L√†m s·∫°ch text ph·ª• ƒë·ªÅ theo c√°c quy t·∫Øc:
    1. Lo·∫°i b·ªè text trong ngo·∫∑c [], {}, ()
    2. Lo·∫°i b·ªè text tr∆∞·ªõc d·∫•u : (t√™n ng∆∞·ªùi n√≥i)
    """
    # Lo·∫°i b·ªè text trong c√°c lo·∫°i ngo·∫∑c
    text = re.sub(r'\[.*?\]', '', text)  # Lo·∫°i b·ªè [text]
    text = re.sub(r'\{.*?\}', '', text)  # Lo·∫°i b·ªè {text}
    text = re.sub(r'\(.*?\)', '', text)  # Lo·∫°i b·ªè (text)
    text = re.sub(r'\<.*?\>', '', text)  # Lo·∫°i b·ªè (text)
    
    # Lo·∫°i b·ªè t√™n ng∆∞·ªùi n√≥i (text tr∆∞·ªõc d·∫•u :)
    # Ch·ªâ lo·∫°i b·ªè n·∫øu d·∫•u : xu·∫•t hi·ªán ·ªü ƒë·∫ßu d√≤ng ho·∫∑c sau kho·∫£ng tr·∫Øng
    text = re.sub(r'^[^:]*:\s*', '', text)  # Lo·∫°i b·ªè t·ª´ ƒë·∫ßu d√≤ng ƒë·∫øn d·∫•u :
    text = re.sub(r'\n[^:\n]*:\s*', '\n', text)  # Lo·∫°i b·ªè t√™n ng∆∞·ªùi n√≥i tr√™n d√≤ng m·ªõi

    # Lo·∫°i b·ªè k√Ω t·ª± ‚ô™
    text = text.replace('‚ô™', '')
    
    # L√†m s·∫°ch kho·∫£ng tr·∫Øng th·ª´a
    text = re.sub(r'\s+', ' ', text)  # Thay nhi·ªÅu kho·∫£ng tr·∫Øng b·∫±ng 1
    text = text.strip()  # Lo·∫°i b·ªè kho·∫£ng tr·∫Øng ƒë·∫ßu cu·ªëi
    
    return text

def process_srt_file(input_file, output_file):
    """
    X·ª≠ l√Ω file SRT v√† l∆∞u k·∫øt qu·∫£
    """
    try:
        with open(input_file, 'r', encoding='utf-8') as f:
            content = f.read()
    except UnicodeDecodeError:
        # Th·ª≠ v·ªõi encoding kh√°c n·∫øu utf-8 kh√¥ng work
        with open(input_file, 'r', encoding='latin-1') as f:
            content = f.read()
    
    # T√°ch c√°c subtitle entry
    entries = re.split(r'\n\s*\n', content.strip())
    cleaned_entries = []
    
    for entry in entries:
        if not entry.strip():
            continue
            
        lines = entry.strip().split('\n')
        
        # Ki·ªÉm tra format SRT h·ª£p l·ªá (√≠t nh·∫•t 3 d√≤ng: s·ªë, time, text)
        if len(lines) < 3:
            continue
            
        # D√≤ng ƒë·∫ßu: s·ªë th·ª© t·ª±
        subtitle_number = lines[0]
        
        # D√≤ng th·ª© 2: timestamp
        timestamp = lines[1]
        
        # C√°c d√≤ng c√≤n l·∫°i: text c·∫ßn l√†m s·∫°ch
        subtitle_text = '\n'.join(lines[2:])
        cleaned_text = clean_subtitle_text(subtitle_text)
        
        # Ch·ªâ gi·ªØ l·∫°i entry n·∫øu c√≤n text sau khi l√†m s·∫°ch
        if cleaned_text.strip():
            cleaned_entry = f"{subtitle_number}\n{timestamp}\n{cleaned_text}"
            cleaned_entries.append(cleaned_entry)
    
    # Ghi file output
    with open(output_file, 'w', encoding='utf-8') as f:
        f.write('\n\n'.join(cleaned_entries))
        if cleaned_entries:  # Th√™m newline cu·ªëi file n·∫øu c√≥ content
            f.write('\n\n')
    
    print(f"‚úì ƒê√£ x·ª≠ l√Ω: {input_file} ‚Üí {output_file}")
    print(f"  S·ªë entry g·ªëc: {len(entries)}, S·ªë entry sau khi l√†m s·∫°ch: {len(cleaned_entries)}")

def main():
    """
    T√¨m v√† x·ª≠ l√Ω t·∫•t c·∫£ file *.clean5.srt v√† *.cleansub.srt trong th∆∞ m·ª•c storage c√πng c·∫•p v·ªõi th∆∞ m·ª•c cha c·ªßa script
    """
    current_dir = Path(__file__).resolve().parent
    parent_dir = current_dir.parent
    storage_dir = parent_dir / "storage"

    clean5_files = list(storage_dir.glob("*.clean5.srt"))
    cleansub_files = list(storage_dir.glob("*.cleansub.srt"))
    all_files = clean5_files + cleansub_files

    if not all_files:
        print(f"Kh√¥ng t√¨m th·∫•y file *.clean5.srt ho·∫∑c *.cleansub.srt n√†o trong th∆∞ m·ª•c: {storage_dir}")
        return

    print(f"T√¨m th·∫•y {len(all_files)} file c·∫ßn x·ª≠ l√Ω trong {storage_dir}:")
    for file in all_files:
        print(f"  - {file.name}")

    print("\nB·∫Øt ƒë·∫ßu x·ª≠ l√Ω...")

    processed_count = 0
    for input_file in all_files:
        try:
            file_path = Path(input_file)
            if input_file.name.endswith('.clean5.srt'):
                output_file = file_path.with_name(file_path.stem.replace('.clean5', '') + '.cleaned.srt')
            elif input_file.name.endswith('.cleansub.srt'):
                output_file = file_path.with_name(file_path.stem.replace('.cleansub', '') + '.cleaned.srt')
            else:
                continue
            process_srt_file(str(input_file), str(output_file))
            processed_count += 1
        except Exception as e:
            print(f"‚úó [ERROR] khi x·ª≠ l√Ω {input_file}: {str(e)}")

    print(f"\nüéâ Ho√†n th√†nh! ƒê√£ x·ª≠ l√Ω th√†nh c√¥ng {processed_count}/{len(all_files)} file.")

if __name__ == "__main__":
    main()